token IDENT (letter | '_') (letter | digit | '_')*;

comment "//";
comment "/*" "*/";

PProgram.      Program ::= [Stmt];

SExpr.         Stmt ::= Expr ".";
SBind.         Stmt ::= Bind ":=" Expr ".";
SAssign.       Stmt ::= IDENT "=" Expr ".";
SIf.           Stmt ::= "if" Expr ":" [Stmt] [ElifStmt] "end";
SIfElse.       Stmt ::= "if" Expr ":" [Stmt] [ElifStmt] "else" [Stmt] "end";
SWhile.        Stmt ::= "while" Expr ":" [Stmt] "end";
SReturn.       Stmt ::= "return" Expr ".";
SReturnVoid.   Stmt ::= "return" ".";
SFunction.     Stmt ::= "func" IDENT "(" [Bind1] ")" "@" Type ":" [Stmt] "end";
SStruct.       Stmt ::= "struct" IDENT ":" [Bind2] "end";
SUnion.        Stmt ::= "union" IDENT ":" [Bind2] "end";
terminator     Stmt "";

ESElif.        ElifStmt ::= "elif" Expr ":" [Stmt];
terminator     ElifStmt "";

ENil.          Expr ::= "nil";
ETrue.         Expr ::= "true";
EFalse.        Expr ::= "false";
EChar.         Expr ::= Char;
EInt.          Expr ::= Integer;
EDouble.       Expr ::= Double;
EString.       Expr ::= String;
EIdent.        Expr ::= IDENT;
ECall.         Expr ::= IDENT "(" [Expr] ")";
--ECast.         Expr ::= "<" Type ">" Expr; --12 sr
--EAccess.       Expr ::= Expr "#" Expr; --12 sr
--EPAccess.      Expr ::= Expr "##" Expr; --12 sr
--EDeref.        Expr ::= "*" Expr; --22 sr
--ERef.          Expr ::= "&" Expr; --22 sr
ESizeof.       Expr ::= "sizeof" "(" Type ")";
--ENegative.     Expr ::= Expr "-"; --29 sr
EDecr.         Expr ::= Expr "--";
EIncr.         Expr ::= Expr "++";
EBitNot.       Expr ::= Expr "~";
ENot.          Expr ::= Expr "!";
EAdd.          Expr ::= Expr Expr "+";
ESubtract.     Expr ::= Expr Expr "-";
EMultiply.     Expr ::= Expr Expr "*";
EDivide.       Expr ::= Expr Expr "/";
EMod.          Expr ::= Expr Expr "%";
EPower.        Expr ::= Expr Expr "**";
EBitShl.       Expr ::= Expr Expr "<<";
EBitShr.       Expr ::= Expr Expr ">>";
EBitAnd.       Expr ::= Expr Expr "&";
EBitOr.        Expr ::= Expr Expr "|";
EBitXor.       Expr ::= Expr Expr "^";
EEqual.        Expr ::= Expr Expr "==";
ENotEqual.     Expr ::= Expr Expr "!=";
ELess.         Expr ::= Expr Expr "<";
EGreater.      Expr ::= Expr Expr ">";
ELessEqual.    Expr ::= Expr Expr "<=";
EGreaterEqual. Expr ::= Expr Expr ">=";
EAnd.          Expr ::= Expr Expr "&&";
EOr.           Expr ::= Expr Expr "||";
separator      Expr ",";

BBind.         Bind ::= IDENT "@" Type;
_.             Bind1 ::= Bind;
_.             Bind2 ::= Bind;
separator      Bind1 ",";
terminator     nonempty Bind2 ".";

TVoid.         Type ::= "void";
TBool.         Type ::= "bool";
TChar.         Type ::= "char";
TInt8.         Type ::= "i8";
TInt16.        Type ::= "i16";
TInt32.        Type ::= "i32";
TInt64.        Type ::= "i64";
TUint8.        Type ::= "u8";
TUint16.       Type ::= "u16";
TUint32.       Type ::= "u32";
TUint64.       Type ::= "u64";
TFloat32.      Type ::= "f32";
TFloat64.      Type ::= "f64";
TPointer.      Type ::= Type "*";
TStruct.       Type ::= "struct" IDENT;
TUnion.        Type ::= "union" IDENT;
